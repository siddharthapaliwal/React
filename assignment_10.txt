10. Hooks (useState, useEffect, useReducer, useMemo, useRef, useCallback)
THEORY EXERCISE

• Question 1: What are React hooks? How do useState() and useEffect() hooks work in functional components?

Answer:

React Hooks: Hooks are functions introduced in React 16.8 that allow functional components to use state and other React features without writing class components.

useState() Hook:

Used to add state to functional components.
Returns an array with the current state value and a function to update it.
Example:
jsx
Copy code
const [count, setCount] = useState(0);
setCount(count + 1); // Updates the count


useEffect() Hook:

Used to handle side effects in functional components (e.g., data fetching, subscriptions).
Replaces lifecycle methods like componentDidMount(), componentDidUpdate(), and componentWillUnmount().
Example:
jsx
Copy code
useEffect(() => {
  console.log("Component mounted or updated");
}, [dependency]); // Executes only when the dependency changes


• Question 2: What problems did hooks solve in React development? Why are hooks considered an important addition to React?

Answer:

Problems Solved by Hooks:

Complexity in managing state and lifecycle methods in class components.
Reusability of logic across components (e.g., avoiding Higher Order Components and Render Props).
Cleaner code and less boilerplate for managing state and effects.

Importance of Hooks:

Simplifies state management and lifecycle handling in functional components.
Enables shared logic through custom hooks.
Improves performance and reusability without needing class components.

• Question 3: What is useReducer? How do we use it in a React app?

Answer:

useReducer is a hook for managing complex state logic.
It is similar to useState but uses a reducer function to handle state updates.

Syntax:

jsx
Copy code
const [state, dispatch] = useReducer(reducer, initialState);


Example:

jsx
Copy code
const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: "increment" })}>Increment</button>
      <button onClick={() => dispatch({ type: "decrement" })}>Decrement</button>
    </div>
  );
};


• Question 4: What is the purpose of useCallback & useMemo Hooks?

Answer:

useCallback:
Memoizes a callback function, preventing it from being re-created unless its dependencies change.
Useful to optimize performance by avoiding unnecessary re-renders of child components.
useMemo:
Memoizes the result of a calculation, re-computing it only when its dependencies change.
Used to optimize expensive calculations.

• Question 5: What’s the Difference between useCallback & useMemo Hooks?

FeatureuseCallbackuseMemoPurposeMemoizes a functionMemoizes a computed valueReturnsA functionA valueUse CaseAvoid re-creating callbacksAvoid re-computing expensive calculations• Question 6: What is useRef? How does it work in a React app?

Answer:

useRef creates a reference to a DOM element or mutable value.
It persists across renders without causing a re-render when updated.

Example:

jsx
Copy code
const inputRef = useRef(null);

const focusInput = () => {
  inputRef.current.focus(); // Access the DOM node
};

return (
  <div>
    <input ref={inputRef} type="text" />
    <button onClick={focusInput}>Focus Input</button>
  </div>
);

LAB EXERCISE

• Task 1: Create a functional component with a counter using the useState() hook. Include buttons to increment and decrement the counter.

jsx
Copy code
import React, { useState } from "react";

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h3>Counter: {count}</h3>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <button onClick={() => setCount(count - 1)}>Decrement</button>
    </div>
  );
};

export default Counter;


• Task 2: Use the useEffect() hook to fetch and display data from an API when the component mounts.

jsx
Copy code
import React, { useState, useEffect } from "react";

const FetchData = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/posts")
      .then((response) => response.json())
      .then((data) => {
        setData(data);
        setLoading(false);
      });
  }, []);

  return (
    <div>
      {loading ? <p>Loading...</p> : <ul>{data.map((item) => <li key={item.id}>{item.title}</li>)}</ul>}
    </div>
  );
};

export default FetchData;


• Task 3: Create a React app with useSelector & useDispatch.

This requires a Redux setup. Example:

jsx
Copy code
import React from "react";
import { useSelector, useDispatch } from "react-redux";
import { increment, decrement } from "./counterSlice";

const Counter = () => {
  const count = useSelector((state) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h3>Counter: {count}</h3>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
    </div>
  );
};

export default Counter;


• Task 4: Create a React app to avoid re-renders in React using useRef.

jsx
Copy code
import React, { useState, useRef } from "react";

const AvoidRerender = () => {
  const renderCount = useRef(0);

  const [state, setState] = useState(0);

  renderCount.current += 1;

  return (
    <div>
      <h3>State: {state}</h3>
      <p>Render Count: {renderCount.current}</p>
      <button onClick={() => setState(state + 1)}>Update State</button>
    </div>
  );
};

export default AvoidRerender;

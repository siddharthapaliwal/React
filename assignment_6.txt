6. Conditional Rendering
THEORY EXERCISE

• Question 1: What is conditional rendering in React? How can you conditionally render elements in a React component?

Answer:

Conditional rendering in React refers to the process of rendering specific elements or components based on certain conditions. It works similarly to conditional statements in JavaScript, where content is displayed depending on the outcome of an expression.

Methods for Conditional Rendering:

if-else Statement: Use traditional JavaScript if-else statements to decide which elements to render.
Ternary Operator (condition ? true : false): A concise way to include conditional logic directly in JSX.
Logical AND (&&): Used to render elements only if a condition is true.
Switch Statements: Useful for multiple conditions.

• Question 2: Explain how if-else, ternary operators, and && (logical AND) are used in JSX for conditional rendering.

Answer:

If-Else:

Place the conditional logic outside the JSX, then return the desired JSX based on the condition.
jsx
Copy code
const isLoggedIn = true;

if (isLoggedIn) {
  return <button>Logout</button>;
} else {
  return <button>Login</button>;
}


Ternary Operator (condition ? true : false):

Inline conditional rendering.
jsx
Copy code
const isLoggedIn = true;

return (
  <div>
    {isLoggedIn ? <button>Logout</button> : <button>Login</button>}
  </div>
);


Logical AND (&&):

Render an element only if the condition is true.
jsx
Copy code
const isAdmin = true;

return (
  <div>
    {isAdmin && <p>Welcome, Admin!</p>}
  </div>
);

LAB EXERCISE

• Task 1: Create a component that conditionally displays a login or logout button based on the user’s login status.

Solution:

Using Functional Component:

jsx
Copy code
import React, { useState } from 'react';

const LoginControl = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  const handleLogin = () => setIsLoggedIn(true);
  const handleLogout = () => setIsLoggedIn(false);

  return (
    <div>
      {isLoggedIn ? (
        <button onClick={handleLogout}>Logout</button>
      ) : (
        <button onClick={handleLogin}>Login</button>
      )}
    </div>
  );
};

export default LoginControl;


Using Class Component:

jsx
Copy code
import React, { Component } from 'react';

class LoginControl extends Component {
  constructor() {
    super();
    this.state = { isLoggedIn: false };
  }

  handleLogin = () => this.setState({ isLoggedIn: true });
  handleLogout = () => this.setState({ isLoggedIn: false });

  render() {
    return (
      <div>
        {this.state.isLoggedIn ? (
          <button onClick={this.handleLogout}>Logout</button>
        ) : (
          <button onClick={this.handleLogin}>Login</button>
        )}
      </div>
    );
  }
}

export default LoginControl;


• Task 2: Implement a component that displays a message like "You are eligible to vote" if the user is over 18, otherwise display "You are not eligible to vote."

Solution:

Using Functional Component:

jsx
Copy code
import React from 'react';

const EligibilityMessage = ({ age }) => {
  return (
    <div>
      {age >= 18 ? (
        <p>You are eligible to vote.</p>
      ) : (
        <p>You are not eligible to vote.</p>
      )}
    </div>
  );
};

export default EligibilityMessage;


Using Class Component:

jsx
Copy code
import React, { Component } from 'react';

class EligibilityMessage extends Component {
  render() {
    const { age } = this.props;

    return (
      <div>
        {age >= 18 ? (
          <p>You are eligible to vote.</p>
        ) : (
          <p>You are not eligible to vote.</p>
        )}
      </div>
    );
  }
}

export default EligibilityMessage;


Usage for Both Components:

jsx
Copy code
import React from 'react';
import EligibilityMessage from './EligibilityMessage';

const App = () => {
  return (
    <div>
      <EligibilityMessage age={20} />
    </div>
  );
};



export default App;
7. Lists and Keys
THEORY EXERCISE

• Question 1: How do you render a list of items in React? Why is it important to use keys when rendering lists?

Answer:

Rendering Lists:

To render a list of items in React, use the map() function to iterate over the array and return JSX for each item.
Example:
jsx
Copy code
const fruits = ["Apple", "Banana", "Cherry"];

return (
  <ul>
    {fruits.map((fruit, index) => (
      <li key={index}>{fruit}</li>
    ))}
  </ul>
);


Importance of Keys:

Keys help React efficiently update and re-render lists by identifying which items have changed, been added, or removed.
Without keys, React may unnecessarily re-render all items, reducing performance.

• Question 2: What are keys in React, and what happens if you do not provide a unique key?

Answer:

Keys in React:

Keys are unique identifiers for each element in a list.
They allow React to track which items in a list are added, removed, or updated.
Keys are typically assigned using a unique property of each item (e.g., id).

What Happens Without Keys:

React will still render the list but might exhibit unexpected behavior during updates, such as incorrect item reordering or mismatched states.
This happens because React cannot accurately differentiate between list items without unique keys.
LAB EXERCISE

• Task 1: Create a React component that renders a list of items (e.g., a list of fruit names). Use the map() function to render each item in the list.

Solution:

Using Functional Component:

jsx
Copy code
import React from 'react';

const FruitList = () => {
  const fruits = ["Apple", "Banana", "Cherry", "Date", "Grapes"];

  return (
    <div>
      <h3>Fruit List:</h3>
      <ul>
        {fruits.map((fruit, index) => (
          <li key={index}>{fruit}</li>
        ))}
      </ul>
    </div>
  );
};

export default FruitList;


• Task 2: Create a list of users where each user has a unique ID. Render the user list using React and assign a unique key to each user.

Solution:

Using Functional Component:

jsx
Copy code
import React from 'react';

const UserList = () => {
  const users = [
    { id: 1, name: "Alice" },
    { id: 2, name: "Bob" },
    { id: 3, name: "Charlie" },
  ];

  return (
    <div>
      <h3>User List:</h3>
      <ul>
        {users.map((user) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default UserList;


Using Class Component:

jsx
Copy code
import React, { Component } from 'react';

class UserList extends Component {
  render() {
    const users = [
      { id: 1, name: "Alice" },
      { id: 2, name: "Bob" },
      { id: 3, name: "Charlie" },
    ];

    return (
      <div>
        <h3>User List:</h3>
        <ul>
          {users.map((user) => (
            <li key={user.id}>{user.name}</li>
          ))}
        </ul>
      </div>
    );
  }
}

export default UserList;


These examples demonstrate how to render lists in React and use keys to ensure efficient rendering. Let me know if you'd like a PDF compilation or further assistance!




4o

You said:

8. Forms in React THEORY EXERCISE • Question 1: How do you handle forms in React? Explain the concept of controlled components. • Question 2: What is the difference between controlled and uncontrolled components in React? LAB EXERCISE • Task 1: o Create a form with inputs for name, email, and password. Use state to control the form and display the form data when the user submits it. • Task 2: o Add validation to the form created above. For example, ensure that the email input contains a valid email addre




ChatGPT said:

ChatGPT

8. Forms in React
THEORY EXERCISE

• Question 1: How do you handle forms in React? Explain the concept of controlled components.

Answer:

In React, forms are handled by maintaining the form's state in a React component. This is achieved by binding form input elements to state variables and updating these variables with the onChange event handler.

Controlled Components:

In a controlled component, the value of the form element is controlled by React state.
The value of the input is set to a state variable, and the onChange event handler updates the state.
Example:
jsx
Copy code
const [name, setName] = React.useState("");

return (
  <input
    type="text"
    value={name}
    onChange={(e) => setName(e.target.value)}
  />
);


• Question 2: What is the difference between controlled and uncontrolled components in React?

Answer:

Controlled Components:
The form data is handled by the React state.
Input values are set using the value attribute, and updates are managed through event handlers like onChange.
Provides better control over form behavior and validation.
Uncontrolled Components:
The form data is handled by the DOM itself.
Use a ref to access the form input value directly from the DOM.
Easier to implement for simple forms but harder to manage for complex validation.

Example Comparison:

Controlled:

jsx
Copy code
const [name, setName] = React.useState("");

return (
  <input
    type="text"
    value={name}
    onChange={(e) => setName(e.target.value)}
  />
);


Uncontrolled:

jsx
Copy code
const nameRef = React.useRef();

return <input type="text" ref={nameRef} />;

LAB EXERCISE

• Task 1: Create a form with inputs for name, email, and password. Use state to control the form and display the form data when the user submits it.

Solution:

jsx
Copy code
import React, { useState } from "react";

const UserForm = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form Data:", formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
      </label>
      <br />
      <label>
        Email:
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
      </label>
      <br />
      <label>
        Password:
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
        />
      </label>
      <br />
      <button type="submit">Submit</button>
    </form>
  );
};

export default UserForm;


• Task 2: Add validation to the form created above. For example, ensure that the email input contains a valid email address.

Solution:

jsx
Copy code
import React, { useState } from "react";

const UserFormWithValidation = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  });
  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const validate = () => {
    let validationErrors = {};
    if (!formData.name) validationErrors.name = "Name is required";
    if (!formData.email.includes("@"))
      validationErrors.email = "Enter a valid email address";
    if (formData.password.length < 6)
      validationErrors.password = "Password must be at least 6 characters";
    return validationErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length === 0) {
      console.log("Form Data:", formData);
    } else {
      setErrors(validationErrors);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
        {errors.name && <p style={{ color: "red" }}>{errors.name}</p>}
      </label>
      <br />
      <label>
        Email:
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
        {errors.email && <p style={{ color: "red" }}>{errors.email}</p>}
      </label>
      <br />
      <label>
        Password:
        <input
          type="password"
          name="password"
          value={formData.password}
          onChange={handleChange}
        />
        {errors.password && <p style={{ color: "red" }}>{errors.password}</p>}
      </label>
      <br />
      <button type="submit">Submit</button>
    </form>
  );
};

export default UserFormWithValidation;
